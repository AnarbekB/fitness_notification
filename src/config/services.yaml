# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~, "@service_container", '@old_sound_rabbit_mq.notification_producer', '@app.upload_service']
        tags:
            - { name: sonata.admin,
                manager_type: orm,
                group: 'Пользователи',
                label: 'Пользователи',
                icon: '<i class="fa fa-users" aria-hidden="true"></i>'
              }
        public: true

    admin.group_lesson:
        class: App\Admin\GroupLessonAdmin
        arguments: [~, App\Entity\GroupLesson, App\Controller\Admin\GroupLessonController, '@old_sound_rabbit_mq.notification_producer']
        tags:
            - { name: sonata.admin,
                manager_type: orm,
                group: 'Занятия',
                label: 'Групповые',
                icon: '<i class="fa fa-futbol-o" aria-hidden="true"></i>'
              }
        public: true

    admin.menu:
        class: App\Admin\MenuAdmin
        arguments: [~, App\Entity\Menu, ~]
        tags:
            - { name: sonata.admin,
                manager_type: orm,
                group: 'Меню',
                label: 'Меню',
                icon: '<i class="fa fa-bars" aria-hidden="true"></i>'
              }
        public: true

    admin.type_menu:
        class: App\Admin\TypeMenuAdmin
        arguments: [~, App\Entity\TypeMenu, ~]
        tags:
            - { name: sonata.admin,
                manager_type: orm,
                group: 'Меню',
                label: 'Типы меню',
                  icon: '<i class="fa fa-bars" aria-hidden="true"></i>'
              }
        public: true

    app.menu_builder:
        class: App\Menu\MenuBuilder
        arguments: ["@knp_menu.factory", "@service_container", "@doctrine.orm.entity_manager"]

    app.main_menu:
        class: Knp\Menu\MenuItem # the service definition requires setting the class
        factory: ["@app.menu_builder", createMainMenu]
        arguments: ["@request_stack"]
        tags:
            - { name: knp_menu.menu, alias: main }

    admin.group_lesson_type:
        class: App\Admin\GroupLessonTypeAdmin
        arguments: [~, App\Entity\GroupLessonType, ~, '@app.upload_service']
        tags:
            - { name: sonata.admin,
                manager_type: orm,
                group: 'Типы занятий',
                label: 'Типы групповых зянятий',
                icon: '<i class="fa fa-futbol-o" aria-hidden="true"></i>'
              }
        public: true

    twilio_client:
        class: Twilio\Rest\Client
        arguments: ['%env(TWILIO_SID)%', '%env(TWILIO_TOKEN)%']
        public: true
        autowire: true
        autoconfigure: true

    sms_service:
        class: App\Service\TwilioSmsService
        arguments: ['@twilio_client']
        public: true
        autowire: true
        autoconfigure: true

    notify_service:
        class: App\Service\NotifyService
        public: true
        autowire: true
        autoconfigure: true
        arguments: ['@templating', '@swiftmailer.mailer.default',  '@sms_service']

    app.consumer.notification:
        class: App\Consumer\NotificationConsumer
        arguments: ['@service_container']

    app.upload_service:
        class: App\Service\UploadService
        public: true
        arguments:
            $webRoot: '%kernel.project_dir%/public'
            $targetDir: '%env(UPLOAD_DIRECTORY)%'